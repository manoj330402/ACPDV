unit ACPDV.DataModule.DAO.Turno;

interface

uses
  ACPDV.DataModule.Inferfaces.InterfaceGenericaDAO, Data.DB,
  System.Generics.Collections, ACPDV.Objeto.Turno,
  ACPDV.DataModule.ConexaoBD, SysUtils;

type
  TDAOTurno = class(TInterfacedObject, iDAO<TTurno>)
    private
      FTurno: TTurno;
      FTurnos: TObjectList<TTurno>;
      FConexaoDB: TdmDados;
      FDataSet: TDataSet;
    public
      constructor Create;
      destructor Destroy; override;
      class function New: iDAO<TTurno>;
      function Listar: iDAO<TTurno>;
      function ListarPorID(aID: Variant): iDAO<TTurno>;
      function Excluir(aID: Variant): iDAO<TTurno>; overload;
      function Excluir: iDAO<TTurno>; overload;
      function Atualizar: iDAO<TTurno>;
      function Inserir: iDAO<TTurno>;
      function DataSource(var aDataSource: TDataSource): iDAO<TTurno>;
      function DataSet: TDataSet;
      function This: TTurno;
      function These: TObjectList<TTurno>;
  end;
implementation

{ TDAOTurno }

function TDAOTurno.Atualizar: iDAO<TTurno>;
begin
  Result := Self;

  FConexaoDB.SQL(
    'UPDATE TURNO     '+
    'SET NOME = :NOME '+
    'WHERE ID = :ID   '
  )
  .Params('ID', FTurno.IDTurno)
  .Params('NOME', FTurno.Nome)
  .ExecSQL;
end;

constructor TDAOTurno.Create;
begin

end;

function TDAOTurno.DataSet: TDataSet;
begin

end;

function TDAOTurno.DataSource(var aDataSource: TDataSource): iDAO<TTurno>;
begin

end;

destructor TDAOTurno.Destroy;
begin

  inherited;
end;

function TDAOTurno.Excluir: iDAO<TTurno>;
begin

end;

function TDAOTurno.Excluir(aID: Variant): iDAO<TTurno>;
begin

end;

function TDAOTurno.Inserir: iDAO<TTurno>;
begin

end;

function TDAOTurno.Listar: iDAO<TTurno>;
begin

end;

function TDAOTurno.ListarPorID(aID: Variant): iDAO<TTurno>;
begin

end;

class function TDAOTurno.New: iDAO<TTurno>;
begin

end;

function TDAOTurno.These: TObjectList<TTurno>;
begin

end;

function TDAOTurno.This: TTurno;
begin

end;

end.
