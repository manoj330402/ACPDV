unit ACPDV.DataModule.DAO.Operador;

interface

uses
  ACPDV.DataModule.Inferfaces.InterfaceGenericaDAO, Data.DB,
  System.Generics.Collections, ACPDV.Objeto.Operador,
  ACPDV.DataModule.ConexaoBD, SysUtils;

type
  TDAOOperador = class(TInterfacedObject, iDAO<TOperador>)
    private
      FOperador: TOperador;
      FOperadores: TObjectList<TOperador>;
      FConexaoDB: TdmDados;
      FDataSet: TDataSet;
    public
      constructor Create;
      destructor Destroy; override;
      class function New: iDAO<TOperador>;
      function Listar: iDAO<TOperador>;
      function ListarPorID(aID: Variant): iDAO<TOperador>;
      function Excluir(aID: Variant): iDAO<TOperador>; overload;
      function Excluir: iDAO<TOperador>; overload;
      function Atualizar: iDAO<TOperador>;
      function Inserir: iDAO<TOperador>;
      function DataSource(var aDataSource: TDataSource): iDAO<TOperador>;
      function This: TOperador;
      function These: TObjectList<TOperador>;
  end;

implementation

{ TDAOAdquirente }

function TDAOOperador.Atualizar: iDAO<TOperador>;
begin
  Result := Self;

  FConexaoDB.SQL(
    'UPDATE OPERADOR 				          '+
    'SET NOME = :NOME, SENHA = :SENHA '+
    'WHERE ID = :ID 				          '
  )
  .Params('NOME', FOperador.Nome)
  .Params('SENHA', FOperador.Senha)
  .ExecSQL;
end;

constructor TDAOOperador.Create;
begin
  FOperador := TOperador.New;
  FOperadores := TObjectList<TOperador>.Create;
  FConexaoDB := TdmDados.New;
end;

function TDAOOperador.DataSource(var aDataSource: TDataSource): iDAO<TOperador>;
begin
  Result := Self;
  aDataSource.DataSet := FDataSet;
end;

destructor TDAOOperador.Destroy;
begin
  FreeAndNil(FOperador);
  FreeAndNil(FOperadores);
  FreeAndNil(FConexaoDB);
  inherited;
end;

function TDAOOperador.Excluir: iDAO<TOperador>;
begin
  Result := Self;

  FConexaoDB.SQL(
    'DELETE FROM OPERADOR '+
    'WHERE ID = :ID       '
  )
  .Params('ID', FOperador.ID)
  .ExecSQL;
end;

function TDAOOperador.Excluir(aID: Variant): iDAO<TOperador>;
begin
  Result := Self;

  FConexaoDB.SQL(
    'DELETE FROM OPERADOR '+
    'WHERE ID = :ID       '
  )
  .Params('ID', aID)
  .ExecSQL;
end;

function TDAOOperador.Inserir: iDAO<TOperador>;
begin
  Result := Self;

  FDataSet := FConexaoDB.SQL(
    'INSERT INTO OPERADOR '+
    '(NOME, SENHA) 		    '+
    'VALUES 			        '+
    '(:NOME, :SENHA)	    '
  )
  .Params('NOME', FOperador.Nome)
  .Params('SENHA', FOperador.Senha)
  .ExecSQL
  .SQL('SELECT * FROM OPERADOR WHERE ID = (SELECT MAX(ID) FROM OPERADOR) ')
  .Open
  .DataSet;

  FOperador.ID := FDataSet.FieldByName('ID').AsInteger;
end;

function TDAOOperador.Listar: iDAO<TOperador>;
begin
  Result := Self;

  FDataSet := FConexaoDB.SQL('SELECT * FROM OPERADOR ')
  .Open
  .DataSet;

  FDataSet.First;
  while not FDataSet.Eof do
  begin
    FOperador.New;
    FOperador.ID := FDataSet.FieldByName('ID').AsInteger;
    FOperador.Nome := FDataSet.FieldByName('NOME').AsString;
    FOperador.Senha := FDataSet.FieldByName('SENHA').AsString;

    FOperadores.Add(FOperador);

    FDataSet.Next;
  end;
end;

function TDAOOperador.ListarPorID(aID: Variant): iDAO<TOperador>;
begin

end;

class function TDAOOperador.New: iDAO<TOperador>;
begin

end;

function TDAOOperador.These: TObjectList<TOperador>;
begin

end;

function TDAOOperador.This: TOperador;
begin

end;

end.
