unit ACPDV.DataModule.DAO.IBPT;

interface

uses
  ACPDV.DataModule.Inferfaces.InterfaceGenericaDAO, Data.DB,
  System.Generics.Collections, ACPDV.Objeto.IBPT,
  ACPDV.DataModule.ConexaoBD, SysUtils;

type
  TDAOFormaPagamento = class(TInterfacedObject, iDAO<TIBPT>)
    private
      FIBPT: TIBPT;
      FIBPTs: TObjectList<TIBPT>;
      FConexaoDB: TdmDados;
      FDataSet: TDataSet;
    public
      constructor Create;
      destructor Destroy; override;
      class function New: iDAO<TIBPT>;
      function Listar: iDAO<TIBPT>;
      function ListarPorID(aID: Variant): iDAO<TIBPT>; overload;
      function ListarPorPK(aID, aEXTIPI, aTIPO: Variant): iDAO<TIBPT>;
      function Excluir(aID: Variant): iDAO<TIBPT>; overload;
      function Excluir: iDAO<TIBPT>; overload;
      function Excluir(aID, aEXTIPI, aTipo: Variant): iDAO<TIBPT>; overload;
      function Atualizar: iDAO<TIBPT>;
      function Inserir: iDAO<TIBPT>;
      function DataSource(var aDataSource: TDataSource): iDAO<TIBPT>;
      function This: TIBPT;
      function These: TObjectList<TIBPT>;
  end;

implementation

{ TDAOFormaPagamento }

function TDAOFormaPagamento.Atualizar: iDAO<TIBPT>;
begin
  Result := Self;

  FConexaoDB.SQL(
    'UPDATE IBPT																                                  	'+
    'SET ALIQ_NACIONAL = :ALIQ_NACIONAL, ALIQ_IMPORTADO = :ALIQ_IMPORTADO,  	    	'+
    'ALIQ_ESTADUAL = :ALIQ_ESTADUAL, ALIQ_MUNICIPAL = :ALIQ_MUNICIPAL, CEST = :CEST '+
    'WHERE ID = :ID 															                                	'+
    'AND EXTIPI = :EXTIPI 														                            	'+
    'AND TIPO = :TIPO															                                	'
  )
  .Params('ID', FIBPT.ID)
  .Params('EXTIPI', FIBPT.EXTIPI)
  .Params('TIPO', FIBPT.Tipo)
  .Params('ALIQ_NACIONAL', FIBPT.AliqNacional)
  .Params('ALIQ_IMPORTADO', FIBPT.AliqImportado)
  .Params('ALIQ_ESTADUAL', FIBPT.AliqEstadual)
  .Params('ALIQ_MUNICIPAL', FIBPT.AliqMunicipal)
  .Params('CEST', FIBPT.CEST)
  .ExecSQL;
end;

constructor TDAOFormaPagamento.Create;
begin
  FIBPT := TIBPT.New;
  FIBPTS := TObjectList<TIBPT>.Create;
  FConexaoDB := TdmDados.New;
end;

function TDAOFormaPagamento.DataSource(var aDataSource: TDataSource): iDAO<TIBPT>;
begin
  Result := Self;
  aDataSource.DataSet := FDataSet;
end;

destructor TDAOFormaPagamento.Destroy;
begin
  FreeAndNil(FIBPT);
  FreeAndNil(FIBPTs);
  FreeAndNil(FConexaoDB);
  inherited;
end;

function TDAOFormaPagamento.Excluir: iDAO<TIBPT>;
begin
  Result := Self;

    FConexaoDB.SQL(
    'DELETE FROM IBPT	    '+
    'WHERE ID = :ID  	    '+
    'AND EXTIPI = :EXTIPI '+
    'AND TIPO = :TIPO	    '
  )
  .Params('ID', FIBPT.ID)
  .Params('EXTIPI', FIBPT.EXTIPI)
  .Params('TIPO', FIBPT.Tipo)
  .ExecSQL;
end;

function TDAOFormaPagamento.Excluir(aID: Variant): iDAO<TIBPT>;
begin

end;

function TDAOFormaPagamento.Inserir: iDAO<TIBPT>;
begin
  Result := Self;

  FDataSet := FConexaoDB.SQL(
    'INSERT INTO IBPT																				                                        '+
    '(ID, EXTIPI, TIPO, ALIQ_NACIONAL, ALIQ_IMPORTADO, ALIQ_ESTADUAL, ALIQ_MUNICIPAL, CEST)			    '+
    'VALUES																						 	                                            '+
    '(:ID, :EXTIPI, :TIPO, :ALIQ_NACIONAL, :ALIQ_IMPORTADO, :ALIQ_ESTADUAL, :ALIQ_MUNICIPAL, :CEST) '
  )
  .Params('ID', FIBPT.ID)
  .Params('EXTIPI', FIBPT.EXTIPI)
  .Params('TIPO', FIBPT.Tipo)
  .Params('ALIQ_NACIONAL', FIBPT.AliqNacional)
  .Params('ALIQ_IMPORTADO', FIBPT.AliqImportado)
  .Params('ALIQ_ESTADUAL', FIBPT.AliqEstadual)
  .Params('ALIQ_MUNICIPAL', FIBPT.AliqMunicipal)
  .Params('CEST', FIBPT.CEST)
  .ExecSQL
  .SQL('SELECT * FROM IBPT WHERE ID = (SELECT MAX(ID) FROM IBPT) ')
  .Open
  .DataSet;

  FIBPT.ID := FDataSet.FieldByName('ID').AsString;
  FIBPT.EXTIPI := FDataSet.FieldByName('EXTIPI').AsString;
  FIBPT.Tipo := FDataSet.FieldByName('TIPO').AsInteger;
end;

function TDAOFormaPagamento.Listar: iDAO<TIBPT>;
begin
  Result := Self;

  FDataSet := FConexaoDB.SQL('SELECT * FROM IBPT ')
  .Open
  .DataSet;

  FDataSet.First;
  while not FDataSet.Eof do
  begin
    FIBPT.New;
    FIBPT.ID := FDataSet.FieldByName('ID').AsString;
    FIBPT.EXTIPI := FDataSet.FieldByName('EXTIPI').AsString;
    FIBPT.Tipo := FDataSet.FieldByName('TIPO').AsInteger;
    FIBPT.AliqNacional := FDataSet.FieldByName('ALIQ_NACIONAL').AsFloat;
    FIBPT.AliqImportado := FDataSet.FieldByName('IALIQ_IMPORTADOD').AsFloat;
    FIBPT.AliqEstadual := FDataSet.FieldByName('ALIQ_ESTADUAL').AsFloat;
    FIBPT.AliqMunicipal := FDataSet.FieldByName('ALIQ_MUNICIPAL').AsFloat;
    FIBPT.CEST := FDataSet.FieldByName('CEST').AsString;

    FIBPTs.Add(FIBPT);

    FDataSet.Next;
  end;
end;

function TDAOFormaPagamento.ListarPorID(aID: Variant): iDAO<TIBPT>;
begin

end;

function TDAOFormaPagamento.ListarPorPK(aID, aEXTIPI, aTIPO: Variant): iDAO<TIBPT>;
begin
  Result := Self;

  FDataSet := FConexaoDB.SQL(
    'SELECT * FROM IBPT   '+
    'WHERE ID = :ID       '+
    'AND EXTIPI = :EXTIPI '+
    'AND TIPO = :TIPO     '
  )
  .Params('ID', aID)
  .Params('EXTIPI', aEXTIPI)
  .Params('TIPO', aTIPO )
  .Open
  .DataSet;

  FIBPT.New;
  FIBPT.ID := FDataSet.FieldByName('ID').AsString;
  FIBPT.EXTIPI := FDataSet.FieldByName('EXTIPI').AsString;
  FIBPT.Tipo := FDataSet.FieldByName('TIPO').AsInteger;
  FIBPT.AliqNacional := FDataSet.FieldByName('ALIQ_NACIONAL').AsFloat;
  FIBPT.AliqImportado := FDataSet.FieldByName('IALIQ_IMPORTADOD').AsFloat;
  FIBPT.AliqEstadual := FDataSet.FieldByName('ALIQ_ESTADUAL').AsFloat;
  FIBPT.AliqMunicipal := FDataSet.FieldByName('ALIQ_MUNICIPAL').AsFloat;
  FIBPT.CEST := FDataSet.FieldByName('CEST').AsString;
end;

class function TDAOFormaPagamento.New: iDAO<TIBPT>;
begin

end;

function TDAOFormaPagamento.These: TObjectList<TIBPT>;
begin

end;

function TDAOFormaPagamento.This: TIBPT;
begin

end;

function TDAOFormaPagamento.Excluir(aID, aEXTIPI, aTipo: Variant): iDAO<TIBPT>;
begin
  Result := Self;

    FConexaoDB.SQL(
    'DELETE FROM IBPT	    '+
    'WHERE ID = :ID  	    '+
    'AND EXTIPI = :EXTIPI '+
    'AND TIPO = :TIPO	    '
  )
  .Params('ID', aID)
  .Params('EXTIPI', aEXTIPI)
  .Params('TIPO', aTipo)
  .ExecSQL;
end;

end.
